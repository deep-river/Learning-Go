Sql相关：

目前大部分数据库系统及文件系统都采用B-Tree「平衡树」或其变种B+Tree作为索引结构

如果给表上了主键，那么表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，也就是上面说的「平衡树」结构，换句话说，就是整个表就变成了一个索引。没错，整个表变成了一个索引，也就是所谓的「聚集索引」。这就是为什么一个表只能有一个主键， 一个表只能有一个「聚集索引」，因为主键的作用就是把「表」的数据格式转换成「索引（平衡树）」的格式放置。

非聚集索引，也就是我们平时经常提起和使用的常规索引。

1.什么是索引
    索引指数据库的目录，比如：字典上面的字母目录 (适用于大数据量)

2.建立索引的优缺点
    优点:查询速度快
    缺点：
    1. 创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。
    2. 每次给字段建一个新索引，字段中的数据就会被复制一份出来，用于生成索引。因此，给表添加索引，会增加表的体积，占用磁盘存储空间。
    3. 索引能让数据库查询数据的速度上升，而使写入数据的速度下降，原因很简单，因为平衡树这个结构必须一直维持在一个正确的状态，增删改数据都会改变平衡树各节点中的索引数据内容，破坏树结构，因此，在每次数据改变时，DBMS必须去重新梳理树（索引）的结构以确保它的正确，这会带来不小的性能开销，也就是为什么索引会给查询以外的操作带来副作用的原因。

3.索引有哪些
    普通 主键 唯一 组合

    普通索引：（由关键字KEY或INDEX定义的索引）的唯一任务是加快对数据的访问速度。适用于name、email等一般属性
    唯一索引：普通索引允许被索引的数据列包含重复的值，而唯一索引不允许，但是唯一索引允许有空值null。任务是保证访问速度和避免数据出现重复。唯一索引一般适用于身份证号码、用户账号等不允许有重复的属性字段上。
    主键索引：在主键字段创建的索引，一张表只有一个主键索引。
    组合索引：多列值组成一个索引，专门用于组合搜索。
    全文索引：对文本的内容进行分词，进行搜索。（MySQL5.6及以后的版本，MyISAM和InnoDB存储引擎均支持全文索引。）

4. 非聚集索引和聚集索引的区别
    非聚集索引和聚集索引的区别在于，通过聚集索引可以查到需要查找的数据，而通过非聚集索引可以查到记录对应的主键值，再使用主键的值通过聚集索引查找到需要的数据

5. 索引检索为什么快
    索引结构：B+Tree
    用二分查找定位数据，时间复杂度O(log n)。IO次数取决于b+树的高度。3层的b+树可以表示上百万的数据，即上百万的数据查找只需要三次IO操作。

6.一般在什么情况下加索引
（1）主键自动建立唯一索引
（2）频繁作为查询条件的字段应该创建索引
（3）查询中与其他表关联的字段，外键关系建立索引
（4）单键/组合索引的选择问题，组合索引的性价比更高
（5）查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度
（6）查询中统计或者分组字段。
（7）过滤条件好的字段选择一段选择加索引

7.怎么知道索引用没用上
    通过explain查询sql执行计划，主要看key使用的是哪个索引

8.组合索引/联合索引，联合索引是有序的吗?
    最左匹配
    如果索引有多列，要遵守最左前缀法则
    即查询从索引的最左前列开始并且不跳过索引中的列。
    值得注意的是，当遇到范围查询(>、<、between、like)就会停止匹配。

    假设，我们对(a,b)字段建立一个索引，也就是说，你where后条件为
    a = 1
    或
    a = 1 and b = 2
    是可以匹配索引的。
    
    但是要注意的是~你执行
    b= 2 and a =1
    也是能匹配到索引的，因为Mysql有优化器会自动调整a,b的顺序与索引顺序一致。
    
    相反的，你执行
    b = 2
    就匹配不到索引了。

    而你对(a,b,c,d)建立索引,where后条件为
    a = 1 and b = 2 and c > 3 and d = 4 
    那么，a,b,c三个字段能用到索引，而d就匹配不到。因为遇到了范围查询(>、<、between、like)。
    
    原理：
    我们对(a,b)字段建立索引，则数据是按照a来进行排序，在a相等的情况下，才按b来排序。因此，我们可以看到a是有序的。而b是一种全局无序，局部相对有序状态!

    联合索引是有序的

9.什么情况下会使索引失效？
（1）违反最左前缀法则
    如果索引有多列，要遵守最左前缀法则
    即查询从索引的最左前列开始并且不跳过索引中的列
（2）在索引列上做任何操作
    如计算、函数、（自动or手动）类型转换等操作，会导致索引失效从而全表扫描
（3) 索引范围条件右边的列
    索引范围条件右边的索引列会失效
（4）使用 关键字 in ，or ，null，!=，<>
（5）以通配符开头（'%abc'）的like

10. sql优化你是怎么做的？
    一.首先开启数据库慢查询日志，定位到查询效率比较低的sql , 找出对应的sql语句并进行分析
    1.表设计是否规范，是否符合三范式的标准
    （1）第一范式：保证原子性（不可拆分）
    （2）第二范式：每张表都有主键
    （3）第三范式（每一列都有主键相关)
    2.查看数据表中是否存在大量的冗余字段，字段数据类型是否合理
    3.尽可能的使用varchar代替char 建表数据类型，能用数值的绝对不用字符存储
    4.尽量避免null值，使用默认值替代空值，数值型可以使用0，字符型可以使用空字符串

    二.查看sql语句是否规范
    （1）避免使用关键字：or ，in，not in ，!=，<>，避免使用select *
    （2）尽量避免子查询，大部分子查询都可以连接查询
    （3）用到or的地方可以使用union去代替实现
    （4）用到in的地方可以使用exists去代替

    三.分析sql的索引是否可以用上
    （1) explain查询sql的执行计划,重点关注的几个列就是，type是不是全表扫描
    （2）看一下索引是否能够用的上,主要看key使用的是哪个索引
    （3）看一下rows扫描行数是不是很大
    ————————————————
    原文链接：https://blog.csdn.net/qq_25502749/article/details/100034186
